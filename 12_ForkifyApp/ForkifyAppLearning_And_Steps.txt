- SASS
    - special type of css file that has additional features to make writing css for large scale app easier
    - browser dont understand sass, need to convert to css file
    - need to convert sass file to css file (done by module bundler like Parcel) else css wont apply

=====================================================================================
Project Guidelines
=====================================================================================

  -------------------------------------------------------------------------------------------------------------------
  Project Setup:
  -------------------------------------------------------------------------------------------------------------------
    1) npm init within project directory
    2) go to package.json -> modify "main" from index.js to <desired file name>.js
    3) set up npm scripts
      - "start": "parcel index.html",
      - "build": "parcel build index.html"
    4) npm i parcel@2 (install v2 of parcel into project dir)
    5) npm i (within project dir to install all dependencies)
    6) add node_modules, dist, .parcel-cache into .gitignore

  -------------------------------------------------------------------------------------------------------------------
  Implementation 1: Load Recipe from API (https://forkify-api.herokuapp.com/v2)
  -------------------------------------------------------------------------------------------------------------------
    1) go to controller.js, create async function to fetch data
      - async showRecipe()
    
  Implementation 2: Render loaded recipe to view
    1) Retrieve html from index.html (have to create own if new project)
      - class="recipe__fig"
    2) include it together in the showRecipe() method created above
      - (dont reference this, will break into MVC architecture later on)
    3) replace html template string with the appropriate variable storing info from the API
      - create for loop to loop through ingredient data to render onto html
        - using .map() since .map returns array then use .join to combine all into string
    4) insert html to DOM using parent element (event propagation)
      - get rid of old markup then insert new markup
      - recipeContainer.innerHTML = ''; // remove existing content
      - recipeContainer.insertAdjacentHTML('afterbegin', markup);
    5) change icon src in .js file
      - when using parcel, static files are moved to "dist" dir with new unique name
        - import myIcons from 'url:../img/icons.svg';
          - myIcons will be the path to the static resource in "dist" dir
        - import <desiredName> from 'url:<pathToStaticResourceInDevDir>'
          - 'url:' syntax required from parcel 2 onwards for any static resources
          - <desiredName> can be any variable name of choice
    6) replace original "src/img/icons.svg" with ${myIcons}
      - since myIcons is the variable containing the path to the static resource in the "dist" dir
  
  -------------------------------------------------------------------------------------------------------------------
  Implementation 3: Add loading spinner
  -------------------------------------------------------------------------------------------------------------------
    1) copy spinner html to controller.js
    2) implement renderSpinner method (takes in parentElement as argument for reusability) 
      - refer to css -> .spinner class to see how spinner syntax are made
    3) call renderSpinner method inside showRecipe method
  
  Implement polyfill for project
    - old browsers can support app
    - npm i core-js regenerator-runtime
  import 'core-js/stable';
  import 'regenerator-runtime/runtime'

  -------------------------------------------------------------------------------------------------------------------
  Implementation 4: Add Event Listeners for:
  -------------------------------------------------------------------------------------------------------------------
    - When user selects recipe (from search results)
    - When page loads with recipe ID (from URL)
    * listen to hash change from url, then fetch data upon hash change detected

  1) window.addEventListener('hashchange', showRecipe); in controller.js
  2) go to showRecipe method & add logic to retrieve hash from url
    - const id = window.location.hash.slice(1); // add inside showRecipe function
  3) window.addEventListener('load', showRecipe); // for new page load
  4) refactor code:
    ['hashchange', 'load'].forEach(evt => window.addEventListener(evt, showRecipe));
  5) add guard clause for if no recipe hash exist in url
    - if (!id) return; // guard clause if no id
  
  -------------------------------------------------------------------------------------------------------------------
  Implementation 5: Refactoring for MVC Architecture
  -------------------------------------------------------------------------------------------------------------------
    1) create model.js & "view" dir + recipeView.js inside "view" dir
    2) go to model.js & create state obj (used to store all data)
    3) create "loadRecipe" function within model.js
      - transfer some code from controller.js for loading recipe into loadRecipe function
        - controller will get hash then pass it as argument to model for Recipe loading
        - update data storage from recipe to state.recipe
    4) import * as model from './model'; in controller.js 
    5) call loadRecipe function within showRecipe function in controller.js to update state
      - await model.loadRecipe(id);
      - update markup from recipe.image -> model.state.recipe.image
    6) set up RecipeView class in recipeView.js
    7) export instance of RecipeView (instead of RecipeView class itself to prevent instantiation of more than 1 view obj)
      - export default new RecipeView(); within RecipeView.js
    8) import recipeView from './views/recipeView.js'; in controller.js
      * in order to pass data to View, create a public method within View class that accepts in required data in argument
        - "render()" method is commonly used, esp in React, to pass in data to View class
    9) create render(data) method inside RecipeView class
      - this.#data = data; // render method acts like a setter method to pass data from controller to view
    10) create private method #generateMarkup() {} where it will return the required markup string
      - transfer markup string from controller.js to generateMarkup function
      - replace model.state.recipe -> this.#data. 
    11) call recipeView.render(model.state.recipe); inside controller.js
    12) create private method #clear() within RecipeView.js to clear existing html content before injecting markup
    13) call this.#generateMarkup method within render() method + this.#clear + inject HTML 
    14) import icons from 'url:../../img/icons.svg'; inside RecipeView.js, need to check path is correct
    15) rename showRecipe to controlRecipe in controller.js
    16) move renderSpinner function from controller.js to RecipeView.js as public method
  
  -------------------------------------------------------------------------------------------------------------------
  Implementation 6: Use fractional module to divide numbers into fractions for better showing of ingredient servings
  -------------------------------------------------------------------------------------------------------------------
    1) npm i fractional
    2) import {Fraction} from 'fractional' inside recipeView.js
    3) go to template string for recipe__ingredient-list -> new Fraction(ing.quantity).toString()
  
  -------------------------------------------------------------------------------------------------------------------
  Implementation 7: Creating helper.js & config.js
  -------------------------------------------------------------------------------------------------------------------
    - for ease of configuring / modifying common files / logic used across app

    1) create config.js & helper.js in "src/js" dir
      - config.js : constants & common variables used in project
      - helper.js : for common logic / functions used in project
    2) create export const API_URL in config.js & transfer the API url from model.js to config.js
    3) import {API_URL} from './config.js' in model.js
    4) update template string for the API URL to fetch const res = await fetch(`${API_URL}/${id}`);
    5) create & export getJSON() function in helper.js
      - used to fetch required data from external APIs using fetch API
      - transfer some code from model.js loadRecipe function to helper.js getJSON function
      - implement try catch in getJSON & throw err in catch so that model.js can handle the error thrown as alert
    6) go to model.js & import {getJSON} from helper.js
    7) call getJSON in model.js -> const data = await getJSON(`${API_URL}/${id}`);
    8) implement timeout function in helper.js to timeout api call after some time to prevent app hang
    9) create a promise race between timeout fn & getJSON fn to return whichever promise resolve first
      - const res = await Promise.race([fetch(`${url}`), timeout(5)]); // race between fetch & timeout 5 seconds
    10) create export const TIMEOUT_SECONDS = 10; in config.js
      - import { TIMEOUT_SECONDS } from "./config"; inside helper.js & implement in timeout(TIMEOUT_SECONDS)

  -------------------------------------------------------------------------------------------------------------------
  Implementation 8: Event handling in MVC architecture (pub sub pattern) for RecipeView
  -------------------------------------------------------------------------------------------------------------------
    - want event handlers to be in "view" dir, not in controller (dont want presentation logic in controller)
    - problem: function to execute upon event is within controller (dont want app logic in view)
      - need to pass function from controller to view
      - cannot call controller function directly from view (because view does not know anything about controller)
      - controller know everything about model & view but not the opposite
    - soln: pub-sub pattern
      - subscribe (controller fn) to publisher (event handler) by passing in subscriber fn
        - event handler publishes the event
        - subscriber (functions to be executed) can subscribe to said event, then based on different subscriber, different fns will be executed
    
    * Have a public method (addHandlerRender(<handlerFn>)) in the view class so that function can be passed to the view
      - controller have init method that will call the addHandlerRender() to pass in the handler function right at program initialization 
    
  1) create public method addHandlerRender() in RecipeView.js
  2) Move existing event handler for recipe in controller.js to addHandlerRender(handlerFn) in RecipeView.js
  3) go to controller.js & create const init = function() {recipeView.addHandlerRender(controlRecipes)}
  4) call the init() function in controller.js -> init();

  -------------------------------------------------------------------------------------------------------------------
  Implementation 9: Exception / Error Handling
  -------------------------------------------------------------------------------------------------------------------
    - to implement error handling to be displayed in the view (not just in the stack trace)
      - error handling should be in the view if displayed in the view
    - error handling in the controller for controller logic & in model for model logic

    Error handling in view:
    1) go to index.html & copy div class="error" logic
    2) go to recipeView.js & create renderError() {}, paste markup syntax into template string
    3) replace src/img/icons.svg -> ${icons}
    4) Replace paragraph text with template string for error message

    5) go to controller.js -> controlRecipes fn, in the catch block, recipeView.renderError(err);
    6) go to model.js loadRecipe fn, in the catch block, log + throw err; (to be caught in the controller.js)
      - model.js calls getJSON fn in the helper.js (therefore, must ensure getJSON fn also throws err)
    
    7) create private #errorMessage in recipeView.js this.#errorMessage = '<desiredMsg>'
    8) set default msg renderError(msg = this.#errorMessage)
    9) Go to controller.js & remove "err" argument from recipeView.renderError()

    10) create renderMessage() method in recipeView class
    11) go to index.html & get class="message", copy syntax to renderMessage method
      - replace src/img/icons.svg -> ${icons}
      - create #message private field
      - set method argument default renderMessage(msg = this.#message)
  
  -------------------------------------------------------------------------------------------------------------------
  Implementation 10: Search Results feature 1: Fetch data from user-provided keyword (Model, View, Controller)
  -------------------------------------------------------------------------------------------------------------------
    1) go to model.js & create async loadSearchResult function, which calls getJSON to get recipe from search result
    2) create "search": {'query': '', 'results': []} within "state" variable in model.js (to store the search results)
    3) use .map() to iterate through search results data & save into state.search.results
    4) add -> state.search.query = query; at the top of loadSearchResult function
    5) go to controller.js to create new controller function : const controlSearchResults = async function() {}

    6) Create searchView.js for search bar (separate from search results view) inside "views" dir
      - create class SearchView + export default new SeachView() // to prevent more instances of class from being instantiated
      - create #parentElement = document.querySelector(".search");
      - create public getQuery method to retrieve query from DOM form input & return query info to controller (don't want controller to have view logic)
    7) import searchView to controller.js & add const query = searchView.getQuery() inside controlSearchResults() + guard clause
    8) use pub-sub to add event listener to listen for search bar 'submit' to execute controlSearchResults()
      - 8.1) create addHandlerSearch(handlerFn) method in searchView.js class + addEventListener to entire form for 'submit' event
        - ev.preventDefault() + call handlerFn() within method
      - 8.2) go to controller.js & call searchView.addHandlerSearch(controlSearchResults) in init() function
    9) go to searchView.js & create #clearInput() method to clear search after submit
      - this.#parentElement.querySelector('.search__field').value = '';

  -------------------------------------------------------------------------------------------------------------------
  Implementation 11: Rendering search results to UI (after fetching data based on search results bar) 
  -------------------------------------------------------------------------------------------------------------------
    1) create resultsView.js in "views" dir & class ResultsView
    2) create View.js & View class as parent class for rendering elements on UI -> export default class View {}
    3) import View from './View.js' in recipeView.js & resultsView.js
    4) change all .# to ._ since parcel cannot process inheritance
    5) copy all methods (except generateMarkup() & addHandlerRender()) from resultsView.js to View.js
      - also copy over ._data attribute to View parent class
    6) go to recipeView & resultsView & add "extends View" to class
    7) import icons from 'url:../../img/icons.svg'; to View class

    8) create _parentElement = document.querySelector('.results'); in ResultsView class 
      - export default new ResultsView(); at bottom of class
    9) import resultsView in controller.js & add resultsView.renderSpinner() at controlSearchResults()
    10) go to resultsView.js & implement _generateMarkup() method (so that superclass render() method can be executed)
      - copy html structure from index.html (class="preview") & paste into _generateMarkup method
    
    11) go to controller.js & call resultsView.render(model.state.search.results) inside controlSearchResults()
    12) go to resultsView.js & update _generateMarkup() method to loop through this._data results array
      - create _generateResultsPreview() method & put results view markup template literal into method
      - update template literal with required data variable
      - import icons from 'url:../../img/icons.svg'; to resultsView.js
    
    13) create _errorMessage & _message attribute in resultsView.js
    14) go to View.js render(data) method & add data guard clause (if (!data || (Array.isArray(data) && data.length === 0)) return this.renderError();)

  -------------------------------------------------------------------------------------------------------------------
  Implementation 12: Implementing pagination for results View
  -------------------------------------------------------------------------------------------------------------------
    - want to render 10 results on each page (if 10 results exists)

    1) go to model.js & create export const getSearchResultsPageData = function (page = state.search.page)
    2) add 'resultsPerPage' key in model.js "state" variable inside "search" obj
    3) go to config.js & export const RESULT_PER_PAGE = 10;
    4) go to model.js & import RESULT_PER_PAGE & update value inside resultsPerPage key in state.search obj
    5) inside "state" variable in model.js, add new key 'page': 1 for state.search obj
    6) inside getSearchResultsPageData inside model.js, add state.search.page = page; 
      - creates a new key to store current page

    7) go to controller.js -> controlSearchResults -> resultsView.render(model.getSearchResultsPage());

    8) create paginationView.js inside "view" dir & PaginationView class (with necessary imports)
      * paginationView will render the buttons for pagination
      - set _parentElement = document.querySelector('.pagination)

    9) export default new PaginationView(); @ bottom of paginationView.js
    10) go to controller.js & import paginationView from 'PaginationView';
    11) inside controlSearchResults function in controller.js, add paginationView.render(model.state.search) under resultsView.render()

    12) go to paginationView & implement _generateMarkup() method which implement logic for 4 scenarios for pagination
      - at page 1, other pages exist (only want next page 2 button)
      - at last page (only want prev page btn)
      - at some other page(want both next & prev page btn)
      - at page 1, no other pages (no buttons wanted)

    13) go to index.html & copy syntax for left & right paginationBtn to paginationView, generateMarkup method  
      - return html template string according to scenarios & update template literals accordingly