- SASS
    - special type of css file that has additional features to make writing css for large scale app easier
    - browser dont understand sass, need to convert to css file
    - need to convert sass file to css file (done by module bundler like Parcel) else css wont apply

- npm i core-js regenerator-runtime
    - to polyfill ES6 code to be backcompatible with earlier versions of JS
    - just import to relevant js files

    import 'core-js/stable'; 
    import 'regenerator-runtime/runtime';


- config.js & helper.js
    - separate modules, independent of app logic, for general purpose
    
    config.js
        - constant variables
        - reusable variables


=====================================================================================
Updating DOM where only changes occurs
=====================================================================================
  update(data) {
    if (!data || (Array.isArray(data) && data.length === 0)) {
      return this.renderError();
    }
    this._data = data;

    // generateMarkup returns HTML string with updated data
    const newMarkup = this._generateMarkup();

    // converts HTML string to DOM Node for ease of comparison
    const newDOM = document.createRange().createContextualFragment(newMarkup);

    // get cur DOM & compare with new DOM + convert Nodelist to Array
    const curElements = Array.from(this._parentElement.querySelectorAll('*'));
    const newElements = Array.from(newDOM.querySelectorAll('*'));

    newElements.forEach((newElement, idx) => {
      const curElement = curElements[idx];
      // firstChild of element is the text node & nodeValue will return text value if its not null
      // update change text
      if (
        !newElement.isEqualNode(curElement) &&
        newElement.firstChild.nodeValue?.trim() !== ''
      ) {
        curElement.textContent = newElement.textContent;
      }

      // update change attribute (data-attribute to correctly show number of servings)
      if (!newElement.isEqualNode(curElement)) {
        Array.from(newElement.attributes).forEach(attribute =>
          curElement.setAttribute(attribute.name, attribute.value)
        );
      }
    });
  }



=====================================================================================
Steps Taken
=====================================================================================
  1) npm init within project directory
  2) go to package.json -> modify "main" from index.js to index.html
  3) set up npm scripts
    - "start": "parcel index.html",
    - "build": "parcel build index.html"
  4) npm i parcel@2 (install v2 of parcel into project dir)
  5) add node_modules into .gitignore