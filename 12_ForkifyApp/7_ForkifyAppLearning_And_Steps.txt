- SASS
    - special type of css file that has additional features to make writing css for large scale app easier
    - browser dont understand sass, need to convert to css file
    - need to convert sass file to css file (done by module bundler like Parcel) else css wont apply

- npm i core-js regenerator-runtime
    - to polyfill ES6 code to be backcompatible with earlier versions of JS
    - just import to relevant js files

    import 'core-js/stable'; 
    import 'regenerator-runtime/runtime';


- config.js & helper.js
    - separate modules, independent of app logic, for general purpose
    
    config.js
        - constant variables
        - reusable variables


=====================================================================================
Updating DOM where only changes occurs
=====================================================================================
  update(data) {
    if (!data || (Array.isArray(data) && data.length === 0)) {
      return this.renderError();
    }
    this._data = data;

    // generateMarkup returns HTML string with updated data
    const newMarkup = this._generateMarkup();

    // converts HTML string to DOM Node for ease of comparison
    const newDOM = document.createRange().createContextualFragment(newMarkup);

    // get cur DOM & compare with new DOM + convert Nodelist to Array
    const curElements = Array.from(this._parentElement.querySelectorAll('*'));
    const newElements = Array.from(newDOM.querySelectorAll('*'));

    newElements.forEach((newElement, idx) => {
      const curElement = curElements[idx];
      // firstChild of element is the text node & nodeValue will return text value if its not null
      // update change text
      if (
        !newElement.isEqualNode(curElement) &&
        newElement.firstChild.nodeValue?.trim() !== ''
      ) {
        curElement.textContent = newElement.textContent;
      }

      // update change attribute (data-attribute to correctly show number of servings)
      if (!newElement.isEqualNode(curElement)) {
        Array.from(newElement.attributes).forEach(attribute =>
          curElement.setAttribute(attribute.name, attribute.value)
        );
      }
    });
  }



=====================================================================================
Steps Taken
=====================================================================================

Project Setup:
    1) npm init within project directory
    2) go to package.json -> modify "main" from index.js to <desired file name>.js
    3) set up npm scripts
      - "start": "parcel index.html",
      - "build": "parcel build index.html"
    4) npm i parcel@2 (install v2 of parcel into project dir)
    5) npm i (within project dir to install all dependencies)
    6) add node_modules, dist, .parcel-cache into .gitignore

  Implementation 1: Load Recipe from API (https://forkify-api.herokuapp.com/v2)
    1) go to controller.js, create async function to fetch data
      - async showRecipe()
    
  Implementation 2: Render loaded recipe to view
    1) Retrieve html from index.html (have to create own if new project)
      - class="recipe__fig"
    2) include it together in the showRecipe() method created above
      - (dont reference this, will break into MVC architecture later on)
    3) replace html template string with the appropriate variable storing info from the API
      - create for loop to loop through ingredient data to render onto html
        - using .map() since .map returns array then use .join to combine all into string
    4) insert html to DOM using parent element (event propagation)
      - get rid of old markup then insert new markup
      - recipeContainer.innerHTML = ''; // remove existing content
      - recipeContainer.insertAdjacentHTML('afterbegin', markup);
    5) change icon src in .js file
      - when using parcel, static files are moved to "dist" dir with new unique name
        - import myIcons from 'url:../img/icons.svg';
          - myIcons will be the path to the static resource in "dist" dir
        - import <desiredName> from 'url:<pathToStaticResourceInDevDir>'
          - 'url:' syntax required from parcel 2 onwards for any static resources
          - <desiredName> can be any variable name of choice
    6) replace original "src/img/icons.svg" with ${myIcons}
      - since myIcons is the variable containing the path to the static resource in the "dist" dir
  
  Implementation 3: Add loading spinner
    1) copy spinner html to controller.js
    2) implement renderSpinner method (takes in parentElement as argument for reusability) 
      - refer to css -> .spinner class to see how spinner syntax are made
    3) call renderSpinner method inside showRecipe method